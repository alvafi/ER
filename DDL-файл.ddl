-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2024-05-03 12:20:56 YEKT
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE brand_of_car (
    name_of_engine  VARCHAR2(100) NOT NULL,
    model           VARCHAR2(100) NOT NULL,
    year_of_release DATE NOT NULL,
    brand_id        NUMBER NOT NULL
);

COMMENT ON COLUMN brand_of_car.name_of_engine IS
    'Название двигателя, установленного в  марке автомобиля';

COMMENT ON COLUMN brand_of_car.model IS
    'Модель  автомобиля';

COMMENT ON COLUMN brand_of_car.year_of_release IS
    'Год выпуска автомобиля';

ALTER TABLE brand_of_car ADD CONSTRAINT brand_pk PRIMARY KEY ( brand_id );

CREATE TABLE car (
    vin                   VARCHAR2(17) NOT NULL,
    state_number          VARCHAR2(20) NOT NULL,
    "GPS-tracker"         VARCHAR2(50) NOT NULL,
    car_id                NUMBER NOT NULL,
    brand_of_car_brand_id NUMBER NOT NULL
);

COMMENT ON COLUMN car.vin IS
    'Идентификационный номер автомобиля, т.е. VIN';

COMMENT ON COLUMN car.state_number IS
    'Государственные номера автомобиля';

COMMENT ON COLUMN car."GPS-tracker" IS
    'Код, который помогает получать данные GPS-трекера, установленного в автомобиле';

ALTER TABLE car ADD CONSTRAINT car_pk PRIMARY KEY ( car_id );

CREATE TABLE client (
    driver_license_number        VARCHAR2(100) NOT NULL,
    issue_date_of_driver_license DATE NOT NULL,
    driver_license_category      VARCHAR2(3) NOT NULL,
    surname                      VARCHAR2(100) NOT NULL,
    name                         VARCHAR2(100) NOT NULL,
    patronymic                   VARCHAR2(100),
    birth_date                   DATE NOT NULL,
    country                      VARCHAR2(100) NOT NULL,
    region                       VARCHAR2(100) NOT NULL,
    street                       VARCHAR2(100) NOT NULL,
    house_number                 VARCHAR2(100) NOT NULL,
    passport_number_and_series   VARCHAR2(100) NOT NULL,
    insurance_company            VARCHAR2(50) NOT NULL,
    ctp_policy_number            VARCHAR2(100) NOT NULL,
    issue_date_of_ctp_policy     DATE NOT NULL,
    client_id                    NUMBER NOT NULL
);

COMMENT ON COLUMN client.driver_license_number IS
    'Номер водительского удостоверения клиента, определяет его возможность арендовать автомобиль';

COMMENT ON COLUMN client.issue_date_of_driver_license IS
    'Дата выдачи водительского,  необходима для проверки действителен ли документа';

COMMENT ON COLUMN client.driver_license_category IS
    'Категория прав определяет марку автомобиля, который может арендовать клиент';

COMMENT ON COLUMN client.surname IS
    'Фамилия клиента';

COMMENT ON COLUMN client.name IS
    'Имя клиента';

COMMENT ON COLUMN client.patronymic IS
    'Отчество клиента';

COMMENT ON COLUMN client.birth_date IS
    'Дата рождения клиента определяет его возможность арендовать автомобиль';

COMMENT ON COLUMN client.country IS
    'Страна, в которой клиент хочет арендовать автомобиль';

COMMENT ON COLUMN client.region IS
    'Регион, где клиент хочет арендовать автомобиль';

COMMENT ON COLUMN client.street IS
    'Часть адреса, где клиент хочет арендовать автомобиль';

COMMENT ON COLUMN client.house_number IS
    'Часть адреса, где клиент хочет арендовать автомобиль';

COMMENT ON COLUMN client.passport_number_and_series IS
    'Номер и серия паспорта клиента';

COMMENT ON COLUMN client.insurance_company IS
    'Название страховой компании позволяет связаться с данным учреждением, чтоб узнать количество ПДД клиента, что определяет тарифный план и марку машины'
    ;

COMMENT ON COLUMN client.ctp_policy_number IS
    'Номер полиса ОСАГО клиента, позволяет определить его возможность арендовать автомобиль ';

COMMENT ON COLUMN client.issue_date_of_ctp_policy IS
    'Дата оформления полиса ОСАГО клиента позволяет определить действителен ли документ';

ALTER TABLE client ADD CONSTRAINT client_pk PRIMARY KEY ( client_id );

CREATE TABLE old_personal_data (
    change_date                  DATE NOT NULL,
    driver_license_number        VARCHAR2(100),
    insurance_company            VARCHAR2(100),
    issue_date_of_driver_license DATE,
    old_pers_data_id             NUMBER NOT NULL,
    client_client_id             NUMBER NOT NULL
);

COMMENT ON COLUMN old_personal_data.change_date IS
    'Дата изменения персональных данных клиента на новые';

COMMENT ON COLUMN old_personal_data.driver_license_number IS
    'Старый номер водительского удостоверения клиента';

COMMENT ON COLUMN old_personal_data.insurance_company IS
    'Названия предыдущей страховой компании, позволяет узнавать количество нарушений  ПДД, в случае замены страховой компании';

COMMENT ON COLUMN old_personal_data.issue_date_of_driver_license IS
    'Старая дата выдачи водительского удостоверения клиента';

ALTER TABLE old_personal_data ADD CONSTRAINT old_pers_data_pk PRIMARY KEY ( old_pers_data_id );

CREATE TABLE rent (
    start_date_of_rent  DATE NOT NULL,
    end_date_of_rent    DATE,
    type_of_rent        VARCHAR2(30) NOT NULL,
    rent_id             NUMBER NOT NULL,
    client_client_id    NUMBER NOT NULL,
    car_car_id          NUMBER NOT NULL,
    rental_area_area_id NUMBER NOT NULL
);

ALTER TABLE rent
    ADD CHECK ( type_of_rent IN ( 'Длинная аренда', 'Короткая аренда' ) );

COMMENT ON COLUMN rent.start_date_of_rent IS
    'Дата начала аренды, момент с которого начинается аренда автомобиля';

COMMENT ON COLUMN rent.end_date_of_rent IS
    'Дата конца аренды, дата, когда заканчивается аренда автомобиля';

COMMENT ON COLUMN rent.type_of_rent IS
    'Вид аренды, определяющий тарифный план';

ALTER TABLE rent ADD CONSTRAINT rent_pk PRIMARY KEY ( rent_id );

CREATE TABLE rental_area (
    сountry VARCHAR2(100) NOT NULL,
    region  VARCHAR2(100) NOT NULL,
    area_id NUMBER NOT NULL
);

COMMENT ON COLUMN rental_area.сountry IS
    'Страна, в которой можно арендовать и использовать автомобиль';

COMMENT ON COLUMN rental_area.region IS
    'Регион, в котором можно арендовать и использовать автомобиль';

ALTER TABLE rental_area ADD CONSTRAINT area_pk PRIMARY KEY ( area_id );

CREATE TABLE review (
    type_of_review VARCHAR2(50) NOT NULL,
    score          INTEGER NOT NULL,
    rev_id         NUMBER NOT NULL,
    rent_rent_id   NUMBER NOT NULL,
    car_car_id     NUMBER NOT NULL
);

ALTER TABLE review
    ADD CHECK ( type_of_review IN ( 'Жалоба', 'Пожелание' ) );

ALTER TABLE review ADD CHECK ( score BETWEEN 1 AND 5 );

COMMENT ON TABLE review IS
    'Сущность, отвечающая за отзывы клиентов после аренды';

COMMENT ON COLUMN review.type_of_review IS
    'Отзывы подразделяются на два типа (пожелание и жалоба)';

COMMENT ON COLUMN review.score IS
    'Оценка арендыв 5-ти бальной системе оценивания';

ALTER TABLE review ADD CONSTRAINT rev_pk PRIMARY KEY ( rev_id );

ALTER TABLE car
    ADD CONSTRAINT car_brand_fk FOREIGN KEY ( brand_of_car_brand_id )
        REFERENCES brand_of_car ( brand_id );

ALTER TABLE old_personal_data
    ADD CONSTRAINT old_pers_data_client_fk FOREIGN KEY ( client_client_id )
        REFERENCES client ( client_id );

ALTER TABLE rent
    ADD CONSTRAINT rent_area_fk FOREIGN KEY ( rental_area_area_id )
        REFERENCES rental_area ( area_id );

ALTER TABLE rent
    ADD CONSTRAINT rent_car_fk FOREIGN KEY ( car_car_id )
        REFERENCES car ( car_id );

ALTER TABLE rent
    ADD CONSTRAINT rent_client_fk FOREIGN KEY ( client_client_id )
        REFERENCES client ( client_id );

ALTER TABLE review
    ADD CONSTRAINT rev_car_fk FOREIGN KEY ( car_car_id )
        REFERENCES car ( car_id );

ALTER TABLE review
    ADD CONSTRAINT rev_rent_fk FOREIGN KEY ( rent_rent_id )
        REFERENCES rent ( rent_id );

CREATE SEQUENCE brand_brand_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER brand_brand_id_trg BEFORE
    INSERT ON brand_of_car
    FOR EACH ROW
    WHEN ( new.brand_id IS NULL )
BEGIN
    :new.brand_id := brand_brand_id_seq.nextval;
END;
/

CREATE SEQUENCE car_car_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER car_car_id_trg BEFORE
    INSERT ON car
    FOR EACH ROW
    WHEN ( new.car_id IS NULL )
BEGIN
    :new.car_id := car_car_id_seq.nextval;
END;
/

CREATE SEQUENCE client_client_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER client_client_id_trg BEFORE
    INSERT ON client
    FOR EACH ROW
    WHEN ( new.client_id IS NULL )
BEGIN
    :new.client_id := client_client_id_seq.nextval;
END;
/

CREATE SEQUENCE old_pers_data_old_pers_data_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER old_pers_data_old_pers_data_id BEFORE
    INSERT ON old_personal_data
    FOR EACH ROW
    WHEN ( new.old_pers_data_id IS NULL )
BEGIN
    :new.old_pers_data_id := old_pers_data_old_pers_data_id.nextval;
END;
/

CREATE SEQUENCE rent_rent_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER rent_rent_id_trg BEFORE
    INSERT ON rent
    FOR EACH ROW
    WHEN ( new.rent_id IS NULL )
BEGIN
    :new.rent_id := rent_rent_id_seq.nextval;
END;
/

CREATE SEQUENCE area_area_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER area_area_id_trg BEFORE
    INSERT ON rental_area
    FOR EACH ROW
    WHEN ( new.area_id IS NULL )
BEGIN
    :new.area_id := area_area_id_seq.nextval;
END;
/

CREATE SEQUENCE rev_rev_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER rev_rev_id_trg BEFORE
    INSERT ON review
    FOR EACH ROW
    WHEN ( new.rev_id IS NULL )
BEGIN
    :new.rev_id := rev_rev_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             7
-- CREATE INDEX                             0
-- ALTER TABLE                             17
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           7
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          7
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
